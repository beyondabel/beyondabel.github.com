<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: UIView及子类控件 | Abel's Den]]></title>
  <link href="http://www.beyondabel.com/blog/categories/uiviewji-zi-lei-kong-jian/atom.xml" rel="self"/>
  <link href="http://www.beyondabel.com/"/>
  <updated>2016-02-28T17:02:31+08:00</updated>
  <id>http://www.beyondabel.com/</id>
  <author>
    <name><![CDATA[Abel]]></name>
    <email><![CDATA[abel_tu@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS组件之UISwitch详解]]></title>
    <link href="http://www.beyondabel.com/blog/2014/01/11/uiswitch/"/>
    <updated>2014-01-11T12:34:31+08:00</updated>
    <id>http://www.beyondabel.com/blog/2014/01/11/uiswitch</id>
    <content type="html"><![CDATA[<h3>引言</h3>

<p>UISwitch继承于UIControl（有关UIControl请参照<a href="/blog/2014/01/06/uicontrol/">《iOS组件之UIControl详解》</a>）,您可以使用UISwitch类来创建和管理使用开/关按钮。例如，在对选项，如飞行模式和蓝牙设置应用程序。这些对象被称为交换机。</p>

<!--more-->


<h3>目录</h3>

<pre><code>1、基本属性及方法
2、iOS5新增
3、iOS6新增
</code></pre>

<h3>1、基本属性及方法</h3>

<p>// 开关是否打开</p>

<pre><code>BOOL on;
</code></pre>

<p>// 这个frame会被忽略，他会强制设置大小</p>

<pre><code>- (id)initWithFrame:(CGRect)frame;
</code></pre>

<p>// 打开/关闭调用函数(animated：是否使用动画)</p>

<pre><code>- (void)setOn:(BOOL)on animated:(BOOL)animated;
</code></pre>

<h3>2、iOS5新增</h3>

<p>// 开关打开时颜色</p>

<pre><code>UIColor *onTintColor;
</code></pre>

<h3>3、iOS6新增</h3>

<p>// 背影颜色</p>

<pre><code>UIColor *tintColor;
</code></pre>

<p>// 开关的圆形滑钮的颜色</p>

<pre><code>UIColor *thumbTintColor;
</code></pre>

<p>// 开关打开时自定义图片</p>

<pre><code>UIImage *onImage;
</code></pre>

<p>// 开关关闭时自定义图片</p>

<pre><code>UIImage *offImage;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS组件之UISlider详解]]></title>
    <link href="http://www.beyondabel.com/blog/2014/01/11/uislider/"/>
    <updated>2014-01-11T12:34:24+08:00</updated>
    <id>http://www.beyondabel.com/blog/2014/01/11/uislider</id>
    <content type="html"><![CDATA[<h3>引言</h3>

<p>UISlider继承于UIControl（有关UIControl请参照<a href="/blog/2014/01/06/uicontrol/">《iOS组件之UIControl详解》</a>）。UISlider对象是用来从一个连续的数值范围内选择单个值的可视化控制。滑块总是显示为水平条形图。一个指标，注意到滑块的当前值，并且可以由用户进行移动来改变该设置。</p>

<!--more-->


<h3>目录</h3>

<pre><code>1、设置初始值
2、改变UISlider的外观
3、供子类重写的方法
</code></pre>

<h3>1、设置初始值</h3>

<p>// 指定初始值</p>

<pre><code>float value;
</code></pre>

<p>// 指定可变最小值</p>

<pre><code>float minimumValue;
</code></pre>

<p>// 指定可变最大值</p>

<pre><code>float maximumValue;
</code></pre>

<h3>2、改变UISlider的外观</h3>

<p>//  设置滑轮左边图片</p>

<pre><code>UIImage *minimumValueImage;
</code></pre>

<p>// 设置滑轮右边图片</p>

<pre><code>UIImage *maximumValueImage;
</code></pre>

<p>//  （默认YES）</p>

<pre><code>BOOL continuous;
</code></pre>

<p>//  滑轮左边颜色如果设置了左边的图片就不会显示（iOS 5.0）</p>

<pre><code>UIColor *minimumTrackTintColor;
</code></pre>

<p>// 滑轮右边颜色如果设置了右边的图片就不会显示(iOS 5.0)</p>

<pre><code>UIColor *maximumTrackTintColor;
</code></pre>

<p>// 设置了滑轮的颜色如果设置了滑轮的样式图片就不会显示(iOS 5.0)</p>

<pre><code>UIColor *thumbTintColor;
</code></pre>

<p>// 动态设置滑动值</p>

<pre><code>- (void)setValue:(float)value animated:(BOOL)animated;
</code></pre>

<p>// 定制自己的滑块图片</p>

<pre><code>- (void)setThumbImage:(UIImage *)image forState:(UIControlState)state;
</code></pre>

<p>// 设置左边的图片</p>

<pre><code>- (void)setMinimumTrackImage:(UIImage *)image forState:(UIControlState)state;
</code></pre>

<p>// 设置右边的图片</p>

<pre><code>- (void)setMaximumTrackImage:(UIImage *)image forState:(UIControlState)state;
</code></pre>

<p>//  根据状态返回滑动图片</p>

<pre><code>- (UIImage *)thumbImageForState:(UIControlState)state;
</code></pre>

<p>// 根据状态左边的图片</p>

<pre><code>- (UIImage *)minimumTrackImageForState:(UIControlState)state;
</code></pre>

<p>// 根据状态右边的图片</p>

<pre><code>- (UIImage *)maximumTrackImageForState:(UIControlState)state;
</code></pre>

<p>// 当前的滑动图片（只读）</p>

<pre><code>UIImage* currentThumbImage;
</code></pre>

<p>// 当前左边的图片（只读）</p>

<pre><code>UIImage* currentMinimumTrackImage;
</code></pre>

<p>// 当前右边的图片（只读）</p>

<pre><code>UIImage* currentMaximumTrackImage;
</code></pre>

<h3>3、供子类重写的方法</h3>

<p>// 以下四种方法用于子类覆盖,用来自定义thumb、track的CGRect</p>

<pre><code>- (CGRect)minimumValueImageRectForBounds:(CGRect)bounds;
- (CGRect)maximumValueImageRectForBounds:(CGRect)bounds;
- (CGRect)trackRectForBounds:(CGRect)bounds;
- (CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS组件之UITextField详解]]></title>
    <link href="http://www.beyondabel.com/blog/2014/01/10/uitextfield/"/>
    <updated>2014-01-10T12:34:12+08:00</updated>
    <id>http://www.beyondabel.com/blog/2014/01/10/uitextfield</id>
    <content type="html"><![CDATA[<h3>引言</h3>

<p>UITextField对象是显示可编辑的文本，当用户按下键盘上的return按钮发送一个动作消息到目标对象,UITextField继承于UIControl（有关UIControl请参照<a href="/blog/2014/01/06/uicontrol/">《iOS组件之UIControl详解》</a>）。</p>

<p>除了其基本的文本编辑行为，UITextField类还提供了清除当前文本内置按钮等一些功能。</p>

<!--more-->


<h3>目录</h3>

<pre><code>1、基本属性及方法
2、重写方法实现定制化UITextfiled
3、第一响应设置
4、UIView的UITextField的扩展属性
5、UITextFieldDelegate代理协议（可选）
</code></pre>

<h3>1、基本属性及方法</h3>

<p>// 设置文本内容</p>

<pre><code>NSString               *text;                 
</code></pre>

<p>// 设置文本显示属性（iOS6.0）</p>

<pre><code>NSAttributedString     *attributedText;
</code></pre>

<p>// 设置字体颜色</p>

<pre><code>UIColor                *textColor;            
</code></pre>

<p>// 设置字体</p>

<pre><code>UIFont                 *font;                 
</code></pre>

<p>// 内容的对齐方式（默认为NSLeftTextAlignment）</p>

<pre><code>NSTextAlignment         textAlignment;        
</code></pre>

<p>// 设置边框样式，只有设置了才会显示边框样式</p>

<pre><code>UITextBorderStyle       borderStyle;          
</code></pre>

<p>// 设置文本的显示属性（iOS7.0）</p>

<pre><code>NSDictionary           *defaultTextAttributes; 
</code></pre>

<p>// 当输入框没有内容时，水印提示</p>

<pre><code>NSString               *placeholder;          
</code></pre>

<p>// （iOS 6.0）</p>

<pre><code>NSAttributedString     *attributedPlaceholder;
</code></pre>

<p>// 再次编辑就清空(默认为NO)</p>

<pre><code>BOOL                    clearsOnBeginEditing;
</code></pre>

<p>// 设置为YES时文本会自动缩小以适应文本窗口大小.默认是保持原来大小,而让长文本滚动　</p>

<pre><code>BOOL                    adjustsFontSizeToFitWidth; 
</code></pre>

<p>// 设置自动缩小显示的最小字体大小</p>

<pre><code>CGFloat                 minimumFontSize;      
</code></pre>

<p>// 设置代理</p>

<pre><code>id&lt;UITextFieldDelegate&gt; delegate; 
</code></pre>

<p>// 设置背景图片</p>

<pre><code>UIImage                *background;
</code></pre>

<p>// 设置背景</p>

<pre><code>UIImage                *disabledBackground;
</code></pre>

<p>// 是否正在编辑(只读)</p>

<pre><code>BOOL editing;
</code></pre>

<p>// （iOS 6.0）</p>

<pre><code>BOOL allowsEditingTextAttributes;
</code></pre>

<p>// （iOS 6.0）</p>

<pre><code>NSDictionary *typingAttributes;
</code></pre>

<p>// 输入框中是否有个叉号，在什么时候显示，用于一次性删除输入框中的内容</p>

<pre><code>UITextFieldViewMode  clearButtonMode;
</code></pre>

<p>//</p>

<pre><code>UIView              *leftView;
UITextFieldViewMode  leftViewMode;

UIView              *rightView;
UITextFieldViewMode  rightViewMode;
</code></pre>

<h3>2、重写方法实现定制化UITextfiled</h3>

<p>//重写来重置边缘区域</p>

<pre><code>- (CGRect)borderRectForBounds:(CGRect)bounds;
</code></pre>

<p>// 重写来重置文字区域</p>

<pre><code>- (CGRect)textRectForBounds:(CGRect)bounds;
</code></pre>

<p>// 重写来重置占位符区域</p>

<pre><code>- (CGRect)placeholderRectForBounds:(CGRect)bounds;
</code></pre>

<p>// 重写来重置编辑区域</p>

<pre><code>- (CGRect)editingRectForBounds:(CGRect)bounds;
</code></pre>

<p>// 重写来重置clearButton位置,改变size可能导致button的图片失真</p>

<pre><code>- (CGRect)clearButtonRectForBounds:(CGRect)bounds;
</code></pre>

<p>//</p>

<pre><code>- (CGRect)leftViewRectForBounds:(CGRect)bounds;
- (CGRect)rightViewRectForBounds:(CGRect)bounds;

- (void)drawTextInRect:(CGRect)rect;
- (void)drawPlaceholderInRect:(CGRect)rect;
</code></pre>

<h3>3、第一响应设置</h3>

<pre><code>UIView *inputView;             
UIView *inputAccessoryView;

BOOL clearsOnInsertion NS_AVAILABLE_IOS(6_0);
</code></pre>

<h3>4、UIView的UITextField的扩展属性</h3>

<pre><code>- (BOOL)endEditing:(BOOL)force;
</code></pre>

<h3>5、UITextFieldDelegate代理协议（可选）</h3>

<p>// 返回一个BOOL值，指定是否循序文本字段开始编辑　</p>

<pre><code>- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField;        
</code></pre>

<p>// 开始编辑时触发，文本字段将成为first responder</p>

<pre><code>- (void)textFieldDidBeginEditing:(UITextField *)textField;
</code></pre>

<p>//返回BOOL值，指定是否允许文本字段结束编辑，当编辑结束，文本字段会让出first responder　要想在用户结束编辑时阻止文本字段消失，可以返回NO.这对一些文本字段必须始终保持活跃状态的程序很有用，比如即时消息</p>

<pre><code>- (BOOL)textFieldShouldEndEditing:(UITextField *)textField;
</code></pre>

<p>// 结束编辑</p>

<pre><code>- (void)textFieldDidEndEditing:(UITextField *)textField; 
</code></pre>

<p>//当用户使用自动更正功能，把输入的文字修改为推荐的文字时，就会调用这个方法。　
//这对于想要加入撤销选项的应用程序特别有用　
//可以跟踪字段内所做的最后一次修改，也可以对所有编辑做日志记录,用作审计用途。　　
//要防止文字被改变可以返回NO　
//这个方法的参数中有一个NSRange对象，指明了被改变文字的位置，建议修改的文本也在其中</p>

<pre><code>- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string; 
</code></pre>

<p>//返回一个BOOL值指明是否允许根据用户请求清除内容.可以设置在特定条件下才允许清除内容</p>

<pre><code>- (BOOL)textFieldShouldClear:(UITextField *)textField; 
</code></pre>

<p>//返回一个BOOL值，指明是否允许在按下回车键时结束编辑　</p>

<pre><code>- (BOOL)textFieldShouldReturn:(UITextField *)textField;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS组件之UISegmentedControl详解]]></title>
    <link href="http://www.beyondabel.com/blog/2014/01/10/uisegmentedcontrol/"/>
    <updated>2014-01-10T12:34:00+08:00</updated>
    <id>http://www.beyondabel.com/blog/2014/01/10/uisegmentedcontrol</id>
    <content type="html"><![CDATA[<p><strong>引言</strong></p>

<p>UISegmentedControl对象是一个水平控制使多个区段，每个区段用作离散的按钮。分段控件提供了一次小型的手段组合在一起的一些控制。</p>

<p>UISegmentedControl继承于UIControl（有关UIControl请参照<a href="/blog/2014/01/06/uicontrol/">《iOS组件之UIControl详解》</a>）.</p>

<!--more-->


<p><strong>目录</strong></p>

<pre><code>1、基本属性及方法
2、iOS 5.0新增
</code></pre>

<p><strong>1、基本属性及方法</strong></p>

<p>// 初始化UISegmentedControl（items可以是NSString类型或者UIImages）</p>

<pre><code>- (id)initWithItems:(NSArray *)items;
</code></pre>

<p>//设置样式 （该样式只在ios2.0~7.0有效果）</p>

<pre><code>UISegmentedControlStyle segmentedControlStyle;
</code></pre>

<p>//设置在点击后是否恢复原样（默认是NO）</p>

<pre><code>BOOL momentary;
</code></pre>

<p>// 设置总选项数</p>

<pre><code>NSUInteger numberOfSegments;
</code></pre>

<p>//是否根据segment的内容改变segment的宽度 (只使用ios5.0，默认为NO)</p>

<pre><code>BOOL apportionsSegmentWidthsByContent;
</code></pre>

<p>//在指定的索引插入一个选项并设置题目</p>

<pre><code>- (void)insertSegmentWithTitle:(NSString *)title atIndex:(NSUInteger)segment animated:(BOOL)animated;
</code></pre>

<p>//在指定的索引插入一个选项并设置图片</p>

<pre><code>- (void)insertSegmentWithImage:(UIImage *)image  atIndex:(NSUInteger)segment animated:(BOOL)animated;
</code></pre>

<p>//移除指定索引的选项</p>

<pre><code>- (void)removeSegmentAtIndex:(NSUInteger)segment animated:(BOOL)animated;
</code></pre>

<p>//移除所有的选项</p>

<pre><code>- (void)removeAllSegments;
</code></pre>

<p>//设置指定索引题目</p>

<pre><code>- (void)setTitle:(NSString *)title forSegmentAtIndex:(NSUInteger)segment;
</code></pre>

<p>//获取指定索引选项的标题</p>

<pre><code>- (NSString *)titleForSegmentAtIndex:(NSUInteger)segment;
</code></pre>

<p>//设置指定索引的图片</p>

<pre><code>- (void)setImage:(UIImage *)image forSegmentAtIndex:(NSUInteger)segment;
</code></pre>

<p>//获取指定索引选项的图片</p>

<pre><code>- (UIImage *)imageForSegmentAtIndex:(NSUInteger)segment;
</code></pre>

<p>//设置指定索引选项的宽度（默认是0）</p>

<pre><code>- (void)setWidth:(CGFloat)width forSegmentAtIndex:(NSUInteger)segment;
</code></pre>

<p>//获取指定索引选项的宽度</p>

<pre><code>- (CGFloat)widthForSegmentAtIndex:(NSUInteger)segment;
</code></pre>

<p>//设置选项中图片等的左上角的位置</p>

<pre><code>- (void)setContentOffset:(CGSize)offset forSegmentAtIndex:(NSUInteger)segment;
</code></pre>

<p>//获取选项中图片等的左上角的位置</p>

<pre><code>- (CGSize)contentOffsetForSegmentAtIndex:(NSUInteger)segment;
</code></pre>

<p>//设置指定索引选项不可选</p>

<pre><code>- (void)setEnabled:(BOOL)enabled forSegmentAtIndex:(NSUInteger)segment;
</code></pre>

<p>//判断指定索引选项是否可选</p>

<pre><code>- (BOOL)isEnabledForSegmentAtIndex:(NSUInteger)segment;
</code></pre>

<p>//设置默认选项索引</p>

<pre><code>NSInteger selectedSegmentIndex; 
</code></pre>

<p>//设置UISegmentedControl的颜色</p>

<pre><code>UIColor *tintColor; 
</code></pre>

<p><strong>2、iOS 5.0新增</strong></p>

<p>//设置在某个状态下的背景图片</p>

<pre><code>- (void)setBackgroundImage:(UIImage *)backgroundImage forState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics;
</code></pre>

<p>//获取在某个状态下的背景图片</p>

<pre><code>- (UIImage *)backgroundImageForState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics   
</code></pre>

<p>//设置分割线背景图片</p>

<pre><code>- (void)setDividerImage:(UIImage *)dividerImage forLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState barMetrics:(UIBarMetrics)barMetCT
</code></pre>

<p>//获取分割线背景图片</p>

<pre><code>- (UIImage *)dividerImageForLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState barMetrics:(UIBarMetrics)barMeE 
</code></pre>

<p>//设置文字显示样式</p>

<pre><code>- (void)setTitleTextAttributes:(NSDictionary *)attributes forState:(UIControlState)state;
</code></pre>

<p>//获取文字显示样式</p>

<pre><code>- (NSDictionary *)titleTextAttributesForState:(UIControlState)state;
</code></pre>

<p>//设置选项中内容的调整位置</p>

<pre><code>- (void)setContentPositionAdjustment:(UIOffset)adjustment forSegmentType:(UISegmentedControlSegment)leftCenterRightOrAlone barMetrics:(UIBarMetrics)barMetrics; 
</code></pre>

<p>//获取选项中内容的调整位置</p>

<pre><code>- (UIOffset)contentPositionAdjustmentForSegmentType:(UISegmentedControlSegment)leftCenterRightOrAlone barMetrics:(UIBarMetrics)barMetrics;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS组件之UIPageControl详解]]></title>
    <link href="http://www.beyondabel.com/blog/2014/01/09/uipagecontrol/"/>
    <updated>2014-01-09T12:33:46+08:00</updated>
    <id>http://www.beyondabel.com/blog/2014/01/09/uipagecontrol</id>
    <content type="html"><![CDATA[<h3>引言</h3>

<p>UIPageControl继承于UIControl（有关UIControl请参照<a href="/blog/2014/01/06/uicontrol/">《iOS组件之UIControl详解》</a>）。您可以使用UIPageControl类来创建和管理页面控件。一个页面控件显示一个水平一系列的点，每个对应一个页面应用程序的文档（或其他数据模型实体）中。当前浏览的页面是由一个白色的圆点表示。</p>

<p>当用户点击一个页面控件移动到下一页或上一页，控制处理由委托发送UIControlEventValueChanged事件。然后委托可以评估当前属性来确定要显示的页面。网页控制在任何一个方向前进只有一个页面。</p>

<!--more-->


<h3>目录</h3>

<p>&mdash;-1、基本属性及方法
2、iOS6.0新增</p>

<h3>1、基本属性及方法</h3>

<p>// 指定页面个数（默认为0）</p>

<pre><code>NSInteger numberOfPages;
</code></pre>

<p>// 当前选中的页面（默认为0，范围为0 ～ numberOfPages-1）</p>

<pre><code>NSInteger currentPage;
</code></pre>

<p>// 如果在numberOfPages为1的情况下隐藏指示器，可以将hideForSinglePage的值设为YES。默认情况下，即使只有一个页面，指示器也会显示进来。</p>

<pre><code>BOOL hidesForSinglePage;
</code></pre>

<p>// 如果你希望直到有时间执行完你的操作之后，才更新当前指示器当前指示页，可以将 defersCurrentPageDisPlay 设为YES。这样的话你必须调用控件的 updateCurentPageDisPlay 来更新当前页</p>

<pre><code>BOOL defersCurrentPageDisplay;
</code></pre>

<p>// 更新当前页</p>

<pre><code>- (void)updateCurrentPageDisplay;
</code></pre>

<p>// 返回接受者的边界大小，与容纳被给的页面数有关</p>

<pre><code>- (CGSize)sizeForNumberOfPages:(NSInteger)pageCount;
</code></pre>

<h3>2、iOS6.0新增</h3>

<p>// 未选中的点的颜色</p>

<pre><code>UIColor *pageIndicatorTintColor;
</code></pre>

<p>// 当前点颜色</p>

<pre><code>UIColor *currentPageIndicatorTintColor;
</code></pre>
]]></content>
  </entry>
  
</feed>
