<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: UIView及子类控件 | Abel之家]]></title>
  <link href="http://beyondabel.github.io/blog/categories/uiviewji-zi-lei-kong-jian/atom.xml" rel="self"/>
  <link href="http://beyondabel.github.io/"/>
  <updated>2014-01-06T17:25:00+08:00</updated>
  <id>http://beyondabel.github.io/</id>
  <author>
    <name><![CDATA[Abel]]></name>
    <email><![CDATA[abel_tu@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS组件之UISwitch详解]]></title>
    <link href="http://beyondabel.github.io/blog/2014/01/06/uiswitch/"/>
    <updated>2014-01-06T12:34:31+08:00</updated>
    <id>http://beyondabel.github.io/blog/2014/01/06/uiswitch</id>
    <content type="html"><![CDATA[<p>// 开关是否打开</p>

<pre><code>BOOL on;
</code></pre>

<p>// 这个frame会被忽略，他会强制设置大小</p>

<!--more-->


<pre><code>- (id)initWithFrame:(CGRect)frame;
</code></pre>

<p>// 打开/关闭调用函数(animated：是否使用动画)</p>

<pre><code>- (void)setOn:(BOOL)on animated:(BOOL)animated;
</code></pre>

<p><strong>iOS5新增    </strong></p>

<p>// 开关打开时颜色</p>

<pre><code>UIColor *onTintColor;
</code></pre>

<p><strong>iOS6新增</strong>
// 背影颜色</p>

<pre><code>UIColor *tintColor;
</code></pre>

<p>// 开关的圆形滑钮的颜色</p>

<pre><code>UIColor *thumbTintColor;
</code></pre>

<p>// 开关打开时自定义图片</p>

<pre><code>UIImage *onImage;
</code></pre>

<p>// 开关关闭时自定义图片</p>

<pre><code>UIImage *offImage;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS组件之UIPageControl详解]]></title>
    <link href="http://beyondabel.github.io/blog/2014/01/06/uipagecontrol/"/>
    <updated>2014-01-06T12:33:46+08:00</updated>
    <id>http://beyondabel.github.io/blog/2014/01/06/uipagecontrol</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<pre><code>1、基本属性及方法
2、iOS6.0新增
</code></pre>

<!--more-->


<p><strong>1、基本属性及方法</strong></p>

<p>// 指定页面个数（默认为0）</p>

<pre><code>NSInteger numberOfPages;
</code></pre>

<p>// 当前选中的页面（默认为0，范围为0 ～ numberOfPages-1）</p>

<pre><code>NSInteger currentPage;
</code></pre>

<p>// 如果在numberOfPages为1的情况下隐藏指示器，可以将hideForSinglePage的值设为YES。默认情况下，即使只有一个页面，指示器也会显示进来。</p>

<pre><code>BOOL hidesForSinglePage;
</code></pre>

<p>// 如果你希望直到有时间执行完你的操作之后，才更新当前指示器当前指示页，可以将 defersCurrentPageDisPlay 设为YES。这样的话你必须调用控件的 updateCurentPageDisPlay 来更新当前页</p>

<pre><code>BOOL defersCurrentPageDisplay;
</code></pre>

<p>// 更新当前页</p>

<pre><code>- (void)updateCurrentPageDisplay;
</code></pre>

<p>// 返回接受者的边界大小，与容纳被给的页面数有关</p>

<pre><code>- (CGSize)sizeForNumberOfPages:(NSInteger)pageCount;
</code></pre>

<p><strong>2、iOS6.0新增</strong>
// 未选中的点的颜色</p>

<pre><code>UIColor *pageIndicatorTintColor;
</code></pre>

<p>// 当前点颜色</p>

<pre><code>UIColor *currentPageIndicatorTintColor;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS组件之UIActivityIndicatorView详解]]></title>
    <link href="http://beyondabel.github.io/blog/2014/01/06/uiactivityindicatorview/"/>
    <updated>2014-01-06T12:30:48+08:00</updated>
    <id>http://beyondabel.github.io/blog/2014/01/06/uiactivityindicatorview</id>
    <content type="html"><![CDATA[<p>// 初始化样式</p>

<pre><code>- (id)initWithActivityIndicatorStyle:(UIActivityIndicatorViewStyle)style;     // sizes the view according to the style
</code></pre>

<p>// 设置样式（默认为UIActivityIndicatorViewStyleWhite）</p>

<pre><code>UIActivityIndicatorViewStyle activityIndicatorViewStyle;
</code></pre>

<p>// 停止时是否隐藏</p>

<pre><code>BOOL hidesWhenStopped;
</code></pre>

<p>// 开始播放动画</p>

<pre><code>- (void)startAnimating;
</code></pre>

<p>// 停止播放动画</p>

<pre><code>- (void)stopAnimating;
</code></pre>

<p>// 是否正在播放动画</p>

<pre><code>- (BOOL)isAnimating;
</code></pre>

<p><strong>iOS5.0新增</strong></p>

<p>// 设置圈圈的颜色</p>

<pre><code>UIColor *color;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS组件之UIProgressView详解]]></title>
    <link href="http://beyondabel.github.io/blog/2014/01/06/uiprogressview/"/>
    <updated>2014-01-06T12:28:03+08:00</updated>
    <id>http://beyondabel.github.io/blog/2014/01/06/uiprogressview</id>
    <content type="html"><![CDATA[<p><strong>目录</strong></p>

<pre><code>1、基本属性及方法
2、iOS5新增内容
</code></pre>

<!--more-->


<p><strong>1、基本属性及方法</strong></p>

<p>// 初始化progressView的样式</p>

<pre><code>- (id)initWithProgressViewStyle:(UIProgressViewStyle)style; 
</code></pre>

<p>// progressView的样式（默认为UIProgressViewStyleDefault）</p>

<pre><code>UIProgressViewStyle progressViewStyle;
</code></pre>

<p>// 进度（范围为0-1）</p>

<pre><code>float progress; 
</code></pre>

<p><strong>2、iOS5新增内容</strong></p>

<p>// 进度填充部分的颜色(譬如进度到40%,那么40%部分的颜色就是这个属性)</p>

<pre><code>UIColor* progressTintColor;
</code></pre>

<p>// 未填充部分的颜色</p>

<pre><code>UIColor* trackTintColor ;
</code></pre>

<p>// 进度填充部分的图片，如progressTintColor</p>

<pre><code>UIImage* progressImage;
</code></pre>

<p>// 未填充部分的图片，如trackTintColor</p>

<pre><code>UIImage* trackImage;
</code></pre>

<p>// 设置progress的进度</p>

<pre><code>- (void)setProgress:(float)progress animated:(BOOL)animated;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS组件之UILabel详解]]></title>
    <link href="http://beyondabel.github.io/blog/2014/01/05/uilabel/"/>
    <updated>2014-01-05T09:57:41+08:00</updated>
    <id>http://beyondabel.github.io/blog/2014/01/05/uilabel</id>
    <content type="html"><![CDATA[<p><img src="/images/2014/01/06/uilabel.png" alt="image" /></p>

<p><strong>引言</strong></p>

<!--more-->


<p><strong>目录</strong></p>

<pre><code>1、属性
2、方法
</code></pre>

<p><strong>1、属性</strong></p>

<p>// UILabel显示内容</p>

<pre><code>NSString           *text;
</code></pre>

<p>// 文字字体(默认为系统字体，大小17)</p>

<pre><code>UIFont             *font;
</code></pre>

<p>// 字体颜色</p>

<pre><code>UIColor            *textColor;
</code></pre>

<p>// 阴影颜色（默认没有阴影）</p>

<pre><code>UIColor            *shadowColor;
</code></pre>

<p>// 阴影大小（默认为（0，-1））</p>

<pre><code>CGSize             shadowOffset; 
</code></pre>

<p>// 文字对齐模式（默认是居左）</p>

<pre><code>NSTextAlignment    textAlignment;
</code></pre>

<p>//  设置单词折行方式（默认NSLineBreakByTruncatingTail）</p>

<pre><code> NSLineBreakMode    lineBreakMode; 
</code></pre>

<p>// 文字显示属性(iOS6.0)</p>

<pre><code>NSAttributedString *attributedText;
</code></pre>

<p>// 文字高亮时的颜色</p>

<pre><code>UIColor *highlightedTextColor; 
</code></pre>

<p>// 是否支持高亮（默认为NO）</p>

<pre><code>BOOL     highlighted;          // default is NO
</code></pre>

<p>// 是否允许接收触摸事件(默认为NO)</p>

<pre><code>BOOL userInteractionEnabled;  // default is NO
</code></pre>

<p>// 文本是否可变(默认YES)</p>

<pre><code>BOOL enabled;                 // default is YES. changes how the label is drawn
</code></pre>

<p>// 设置label可以显示多少行(0表示多行，默认为1)</p>

<pre><code>NSInteger numberOfLines;
</code></pre>

<p>// 文本文字是否自适应大小(默认为NO)</p>

<pre><code>BOOL adjustsFontSizeToFitWidth;         // default is NO
</code></pre>

<p>//</p>

<pre><code>BOOL adjustsLetterSpacingToFitWidth NS_DEPRECATED_IOS(6_0,7_0); // deprecated - hand tune by using NSKernAttributeName to affect tracking
</code></pre>

<p>// 最小字体，行数为1时有效（默认为0.0 iOS2.0 &ndash; iOS6.0）</p>

<pre><code>CGFloat minimumFontSize;
</code></pre>

<p>// 控制文本的基线位置，只有文本行数为1是有效（默认为UIBaselineAdjustmentAlignBaselines）</p>

<pre><code>UIBaselineAdjustment baselineAdjustment;
//有三种方式
typedef enum {
    UIBaselineAdjustmentAlignBaselines = 0, 默认值文本最上端于label中线对齐
    UIBaselineAdjustmentAlignCenters,//文本中线于label中线对齐
    UIBaselineAdjustmentNone,//文本最低端与label中线对齐
} UIBaselineAdjustment;
</code></pre>

<p>// 设置最小字体,与minimumFontSize相同（iOS6.0）</p>

<pre><code>CGFloat minimumScaleFactor; 
</code></pre>

<p>// 优先选择标签布局的最大宽度(iOS 6.0)</p>

<pre><code>CGFloat preferredMaxLayoutWidth;    
</code></pre>

<p><strong>2、方法</strong></p>

<p>// 不可直接调用,需要子类重载,第二参数为0时没有行数限制</p>

<pre><code>- (CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(NSInteger)numberOfLines;
</code></pre>

<p>// 不可直接调用,需要子类重载</p>

<pre><code>- (void)drawTextInRect:(CGRect)rect;
</code></pre>
]]></content>
  </entry>
  
</feed>
