<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS常用设计模式 | Abel's Den]]></title>
  <link href="http://www.beyondabel.com/blog/categories/ioschang-yong-she-ji-mo-shi/atom.xml" rel="self"/>
  <link href="http://www.beyondabel.com/"/>
  <updated>2016-03-15T00:31:07+08:00</updated>
  <id>http://www.beyondabel.com/</id>
  <author>
    <name><![CDATA[Abel]]></name>
    <email><![CDATA[abel_tu@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS常用设计模式之委托模式]]></title>
    <link href="http://www.beyondabel.com/blog/2013/10/31/ios-proxymode/"/>
    <updated>2013-10-31T19:20:57+08:00</updated>
    <id>http://www.beyondabel.com/blog/2013/10/31/ios-proxymode</id>
    <content type="html"><![CDATA[<h3>引言</h3>

<p>在代理模式中，有两个对象参与处理同一个请求，接受请求的对象将请求委托给另一个对象来处理。</p>

<!--more-->


<h3>目录</h3>

<ul>
<li>1、什么是代理模式</li>
<li>2、使用代理模式的优点</li>
<li>3、什么时候使用代理模式</li>
<li>4、代理模式一般涉及到的角色</li>
<li>5、Objective-C的代理模式实现</li>
</ul>


<h3>1、什么是代理模式</h3>

<p>对其他对象提供一种代理以控制对这个对象的访问。</p>

<h3>2、使用代理模式的优点</h3>

<pre><code>(1)职责清晰：真实的角色就是实现实际的业务逻辑，不用关心其他非本职责的事务，
            通过后期的代理完成一件完成事务，附带的结果就是编程简洁清晰。
(2)代理对象可以在客户端和目标对象之间起到中介的作用，这样起到了的作用和保护了目标对象的作用。
(3)高扩展性
</code></pre>

<h3>3、什么时候使用代理模式</h3>

<p>在对已有的方法进行使用的时候出现需要对原有方法进行改进或者修改，这时候有两种改进选择：修改原有方法来适应现在的使用方式，或者使用一个“第三者”方法来调用原有的方法并且对方法产生的结果进行一定的控制。第一种方法是明显违背了“对扩展开放、对修改关闭”（开闭原则），而且在原来方法中作修改可能使得原来类的功能变得模糊和多元化（就像现在企业多元化一样），而使用第二种方式可以将功能划分的更加清晰，有助于后面的维护。所以在一定程度上第二种方式是一个比较好的选择！</p>

<h3>4、代理模式一般涉及到的角色</h3>

<p>抽象角色：声明真实对象和代理对象的共同接口；</p>

<p>代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。</p>

<p>真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。</p>

<h3>5、Objective-C的代理模式实现</h3>

<p>现在借助主人和仆人的角色来讲解代理模式。我们想象一下，主人想喝水，需要去买水，但主人不知道怎么去买水，那他叫仆人去帮他买水，仆人听到命令就去买水，仆人买完水再交给主人，这个时候主人就有水喝了。</p>

<p>现在我们用Objective-C来实现这个过程</p>

<p>新建一个Servant协议类
```objc</p>

<pre><code>#import &lt;Foundation/Foundation.h&gt;
@protocol ServantProtocol &lt;NSObject&gt;
- (void) finishedBuyWater;
- (void) finishedBuyWaterError;
@end
</code></pre>

<p>```</p>

<p>新建一个仆人Servant类，.h文件如下：</p>

<p>```objc</p>

<pre><code>#import &lt;Foundation/Foundation.h&gt;
#import "ServantProtocol.h"

@interface Servant : NSObject
@property (nonatomic,assign) id&lt;ServantProtocol&gt; delegate;
- (void) buyWater;
@end
</code></pre>

<p>```</p>

<p>.m文件如下：
```objc</p>

<pre><code>#import "Servant.h"

@implementation Servant
- (void) buyWater:(NSInteger)money
{
    if (money &gt; 2) {
        [self.delegate finishedBuyWater];
    }else{
        [self.delegate finishedBuyWaterError];
    }
}
@end
</code></pre>

<p>```</p>

<p>新建一个Master类，.h文件如下：
```objc</p>

<pre><code>#import &lt;Foundation/Foundation.h&gt;
#import "ServantProtocol.h"

@interface Master : NSObject&lt;ServantProtocol&gt;
- (void) drinkWater;
@end
</code></pre>

<p><code>
.m文件如下：
</code>objc</p>

<pre><code>#import "Master.h"
#import "Servant.h"

@implementation Master

- (void) drinkWater
{
    Servant * servant = [[Servant alloc] init];
    servant.delegate = self;
    // 命令仆人去买水
    [servant buyWater];
}

#pragma mark - ServantProtocol
- (void) finishedBuyWater
{
    NSLog(@"完成买水");
}

- (void) finishedBuyWaterError
{
    NSLog(@"买水出错");
}
@end
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS常用设计模式之单例模式]]></title>
    <link href="http://www.beyondabel.com/blog/2013/10/30/singleton/"/>
    <updated>2013-10-30T12:55:59+08:00</updated>
    <id>http://www.beyondabel.com/blog/2013/10/30/singleton</id>
    <content type="html"><![CDATA[<p><img src="/images/2013/10/30/singleton.png" alt="image" /></p>

<h3>引言</h3>

<p>在很多时间，singleton定义为“有且仅有一个元素的集合”，所以不管那个对象到底有多大，每次我们拿这个对象时都是同一个。在什么情况下会需要单例以及单例在Objective-C中如何实现呢？本节Abel将与您一起探讨一些有关singleton的知识。</p>

<!--more-->


<h3>目录</h3>

<ul>
<li>1、什么是单例模式</li>
<li>2、什么时候用单例模式</li>
<li>3、Objective-C中单例模式的实现</li>
<li>4、线程安全</li>
<li>5、总结</li>
</ul>


<h3>1、什么是单例模式</h3>

<p>单例模式几乎是设计模式中最简单的了。这一模式的意图是使得类的一个对象成为系统中唯一的实例。要实例这一点，可以从客户端对其进行实例化开始。因此需要用一种只允许生成对象类的唯一实例的机制，“阻止”所有想要生成对象的访问。我们可以用工厂方法来限制实例化过程。这个方法应该是一个静态的方法（类方法），因为让类的实例去生成另一个唯一实例毫无意义。</p>

<h3>2、什么时候使用单例模式</h3>

<pre><code>1、类只能有一个实例，而且必须从一个为人熟知的访问点对其访问。
2、这个唯一的实例只能通过子类化进行扩展，而且扩展的对象不会破坏客户端代码。
</code></pre>

<h3>3、Objective-C中单例模式的实现</h3>

<p>在《设计模式》一书中的原始示例中，单例模式的C++例子如下所求：
```objc</p>

<pre><code>class Singleton
{
    public:
        static Singleton *Instance();
    protected:
        Singleton();
    private:
        static Singletion * _instance;
}

Singleton *Singleton::Instance()
{
    if(_instance == 0)
    {
        instance = new Singleton;
    }
    return _instance;
}
</code></pre>

<p>```
知道C++语言的人都能看出来，在上面的C++代码Instance()方法中，检查静态的_instance实例变量，看它是否为0，如果是，会生成一个新的Singleton对象，然后将实例返回，现在我们把它改造成Objective-C版。</p>

<p>那么用Objective-C如何实现单例模式呢？下面我们来新建一个Singleton类，在Singleton.h中实现如下
```objc</p>

<pre><code>@interface Singleton : NSObject 
+ (Singleton *) sharedInstance;
@end 
</code></pre>

<p><code>
在Singleton.m
</code>objc</p>

<pre><code>@implementation Singleton 
static Singleton * sharedSingleton = nil;

+ (Singleton *) sharedInstance  { 
    if (sharedSingleton == nil) {    
        sharedSingleton = [[Singleton alloc] init]; 
    } 
    return sharedSingleton;
}  
@end 
</code></pre>

<p>```
按照C++改造成Objective-C就完成了。如果真是这样的话，那么单例模式真的是太简单了，但实际上，需要克服一些障碍，才能让单例模式更可靠，可以真正放心地应用于程序中。如果需要实现一个“严格”的单例模式，还需要面对两个主要的障碍。</p>

<pre><code>发起调用的对象不能以其他分配方式实例化对象。否则，就有可能创建多个单例实例。
对单例对象实例化的限制应该与引用计数内存模型共存。
</code></pre>

<p>下面我对<code>Singleton.m</code>的进行改进
```objc</p>

<pre><code>@implementation Singleton  
 static Singleton * sharedSingleton = nil;  
+ (Singleton *) sharedInstance  {  
    if (sharedSingleton == nil) {  
        sharedSingleton = [[super allocWithZone:NULL] init];  
    }  
    return sharedSingleton;  
}  

+ (id) allocWithZone:(struct _NSZone *)zone  {  
    return [[self sharedInstance] retain];  
}  

- (id) copyWithZone:(NSZone *) zone  {  
    return self;  
}  

- (id) retain  {  
    return self;  
}  

- (NSUInteger) retainCount  {  
    return NSUIntegerMax;  
}  


- (void) release  {  
//  
}  

- (id) autorelease  {  
    return self;  
}  
@end 
</code></pre>

<p><code>
也许你注意到了，我重载了</code>allocWithZone:<code>``，保持了从</code>sharedInstance<code>方法返回的单例对象，使用者哪怕使用</code>alloc<code>时也会返回唯一的实例（</code>alloc<code>方法中会先调用</code>allocWithZone:<code>创建对象）。而</code>retain`等内存管理的函数也被重载了，这样实现了合适的内存管理原则。</p>

<h3>4、线程安全</h3>

<p>如果单例对象要由多个线程访问，那么使它的线程安全至关重要。例子中的Singleton类只能胜任一般用途。要让它线程安全，需要在sharedSingleton静态实例的nil检查周围加入一些@synchronized()程序块或者NSLock实例。如果有其他的属性需要保护，也可以把它们声明为atomic型。</p>

<h3>5、总结</h3>

<p>到此，单例模式的讲解就到些结束了。不管在哪个平台开发，单例模式都极为常用。如果单例模式还有不懂的地方，可以给我留言。</p>
]]></content>
  </entry>
  
</feed>
