<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS开发知识积累 | Abel's Den]]></title>
  <link href="http://www.beyondabel.com/blog/categories/ioskai-fa-zhi-shi-ji-lei/atom.xml" rel="self"/>
  <link href="http://www.beyondabel.com/"/>
  <updated>2016-03-22T22:36:15+08:00</updated>
  <id>http://www.beyondabel.com/</id>
  <author>
    <name><![CDATA[Abel]]></name>
    <email><![CDATA[abel_tu@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ARC vs MRC，这不是一个编程习惯问题]]></title>
    <link href="http://www.beyondabel.com/blog/2014/03/05/mrc-arc/"/>
    <updated>2014-03-05T10:21:40+08:00</updated>
    <id>http://www.beyondabel.com/blog/2014/03/05/mrc-arc</id>
    <content type="html"><![CDATA[<p><img src="/images/2014/03/05/arcvsmrc.png" alt="image" /></p>

<h3>引言</h3>

<p>虽然距离WWDC2011和iOS5已经过去3年多时间了，但之前我一直没有去研究过ARC，一个是因为觉得ARC非常简单，到时什么时候想使用ARC时再转向ARC，第二个是担心内存管理不受自己控制（好吧，从现在来看是我对ARC机制了解不足而已），第三，我觉得使用MRC更能体现一个码农对内存管理的理解，第四，我是一个追求技术不“追赶时髦”的码农。说了这么多的原因，其实是想说作为一个最需要“追求时髦”的职业，我这样的心态是错误的。写这篇文章的目的是希望和我一同处于对 MAC &amp;　ARC迷茫的人的一个参考吧！</p>

<!--more-->


<h3>目录</h3>

<ul>
<li>1、 什么是ARC</li>
<li>2、 ARC工作原理</li>
<li>3、 MRC的代价</li>
<li>4、 ARC &amp; MAC 在大量数据下的测试</li>
<li>5、 CF与Objective-C在ARC下的内存管理</li>
<li>6、 使用ARC注意事项</li>
<li>7、 总结</li>
</ul>


<h4>1、什么是ARC</h4>

<p>什么是ARC，google一下，你会发现有太多太多对ARC非常非常详细的讲解。对于有C++背景的人来说，ARC的本质从某种角度上来说类似 C++ 的智能指针，区别就是ARC更智能简单，而且会加速程序，而不是像智能指针那样会一定程度上减慢程序运行。对于纯ObjC背景的人来说，ARC相当于编译器自动帮你填写了 retain, release。但是，远远不是这么简单。</p>

<p>首先ARC不会真的填写<code>retain/release</code>，<code>retain/release</code> 是 ObjC的消息，ARC会直接调用runtime的C函数，这会快很多。另外对于MRC中恶心的 <code>return [[[XXX alloc] init] autorelease]</code> ，ARC不但可以简化其写法，还可以让它更快，原因就在于它可以消除不必要的“入池”操作（<code>autorelease</code>是放到了自动释放池），详见objc_retainAutoreleasedReturnValue.</p>

<p>基于上面两点，ARC会让所有涉及到内存的操作变快。</p>

<p>ARC虽然会让单位内存操作变快，甚至会智能的取消某些<code>retain/release</code>，但是毕竟ARC不是人脑，如果一个人完全清晰的掌握某个对象的生命周期，那么他完全可以只retain一次，然后在最后不需要的时候release掉，所以MRC可以在这种情况下比ARC快。至于具体应用到项目中的数据，可以参考 <a href="http://www.learn-cocos2d.com/2013/12/performance-comparison-cocos2diphone-v2-v3-sparrow-arc-mrc/">http://www.learn-cocos2d.com/2013/12/performance-comparison-cocos2diphone-v2-v3-sparrow-arc-mrc/</a>  。其中有快有慢。</p>

<h4>2、 ARC工作原理</h4>

<p>手动内存管理的机理大家应该已经非常清楚了，简单来说，只要遵循以下三点就可以在手动内存管理中避免绝大部分的麻烦：</p>

<p>如果需要持有一个对象，那么对其发送retain 如果之后不再使用该对象，那么需要对其发送release（或者autorealse） 每一次对retain,alloc或者new的调用，需要对应一次release或autorealse调用</p>

<p>初学者可能仅仅只是知道这些规则，但是在实际使用时难免犯错。但是当开发者经常使用手动引用计数 MRC 的话，这些规则将逐渐变为本能。你会发现少一个release的代码怎么看怎么别扭，从而减少或者杜绝内存管理的错误。可以说MRC的规则非常简单，但是同时也非常容易出错。往往很小的错误就将引起crash或者内存溢出之类的严重问题。</p>

<p>在MRC的年代里，为了避免不小心忘写release，Xcode提供了一个很实用的小工具来帮助可能存在的代码问题(Xcode里默认快捷键command+B)，可以指出潜在的内存泄露或者过多释放。而ARC在此基础上更进一步：ARC是Objective-C编译器的特性，而不是运行时特性或者垃圾回收机制，ARC所做的只不过是在代码编译时为你自动在合适的位置插入release或autorelease，就如同之前MRC时你所做的那样。</p>

<h4>3、MRC的代价</h4>

<p>代码有好多代价，最简单直白的代价是编写时的代价，然后更重大的代价则是维护的代价。</p>

<p>编写的代价：
每个人的脑力都是有限的，而在编程的时候往往需要全心专注，这说明编程本身就耗费了100%的脑力。基于这个出发点，那么如果一个人在每写100行代码里面10行都是内存维护相关的代码时，他分配给其他的东西（程序结构，API设计，业务逻辑）肯定会减少，除非他愿意花更多的时间来写这个东西（加班）。注意，内存维护的10行代码并非简单地事情，要把他们搞正确，一个合格的MRC程序员肯定会前后审阅自己的代码好几遍。</p>

<p>维护的代价：
代码的本质是动态的，它会随着时间不停的改变自己，所以代码不但需要运行时健壮，同时还需要重构健壮，即你能安全的重构一段代码，而不是重构之后错误百出。这个举个常见例子：</p>

<p>在MRC下，有一个函数，在运行中间会 return 掉，那么所有合格的MRC程序员必然会记得在return之前把 alloc 的对象逐个 release 掉，咱不讨论在MRC下如果多几个中途return会让代码多么难写（这是编写代价），假设写好了，程序OK，没bug。然后某天重构了，把 return 提前了，然后由于位置提前，需要release的对象变成了另外一些，这会造成相当多的重构bug。另外一个例子，假设这个MRC程序员采用了极端的 retain/release 优化，那么在重构时必然要全面审视新的代码下面原来的优化是否安全，代价很高。那如果这些代码要交给别人重构呢？</p>

<p>维护代价的另一面是阅读时的代价。代码的价值是给人（别人或者自己）读，一行代码敲下去，可能要被读10遍，20遍。设想一下阅读到处穿插 <code>retain/ release</code> 的代码 vs 阅读清晰的业务逻辑的代码的容易程度对比。</p>

<h4>4、 ARC &amp; MAC 在大量数据下的测试</h4>

<p>下面举一个例子，同样的代码，只是在「ARC」与「MRC」的情況下编译执行， 但是二者所需要的时间是相差数倍的！
```objc</p>

<pre><code>int n = 600000, m = 10000000;
arr = [NSMutableArray new];
for (int i = 0; i &lt; n; i++) {
    [arr addObject:[NSNumber numberWithInt:1]];
}

CFAbsoluteTime start = CFAbsoluteTimeGetCurrent();

id obj = nil;
for (int j = 0; j &lt; m; j++) {
    obj = [arr objectAtIndex:n - 1];
}

CFAbsoluteTime end = CFAbsoluteTimeGetCurrent();

NSLog(@"end:%lf, start:%lf, diff:%lf", end, start, end - start);

[arr release]; // -&gt; 这一行是「MRC」需要加上的，但「ARC」沒有这行
</code></pre>

<p>```
执行结果：</p>

<pre><code>MRC:  end:358178433.846184, start:358178433.753032, diff:0.093152
ARC:    end:358178929.480108, start:358178928.841418, diff:0.638690
</code></pre>

<p>可以看出「MRC」的版本比「ARC」的版本快了近7倍！</p>

<p>但实际上程序是慢在哪呢？ &ndash;> 慢在 obj = [arr objectAtIndex:n &ndash; 1]; 这个地方， XCode 在 Compile 的时候，帮我們加上了类似下面的代码，</p>

<pre><code>obj = [[arr objectAtIndex:n - 1] retain];
[obj autorelease];
</code></pre>

<p>如果把「MRC」的版本修改为上述的代码，
则执行結果：</p>

<pre><code>MRC:  end:358179022.496308, start:358179021.894909, diff:0.601399
</code></pre>

<p>是不是就变慢了！
因此，XCode 在 Compile 的时候，我想它对代码的记忆管理是采取较保守的态度， 如此看來，iOS 5 预设 property 为 strong 也就不意外了！</p>

<p>那么上面所举的例子要怎么解決呢？ &ndash;> 我们可以透过 Toll-Free Bridged Types 来解決！ 来看一下，我们将 ARC 的版本的代码改成下面这个样子： 將NSArray改成使用CFArrayRef， 这是 Foundation class &ndash;> Core Foundation type 的转换， 这样的转换是 Toll-Free 的！</p>

<pre><code>__unsafe_unretained id obj;
for (int j = 0; j &lt; m; j++){
  obj = (__bridge __unsafe_unretained id)CFArrayGetValueAtIndex((__bridge CFArrayRef)arr, n - 1);
}
</code></pre>

<p>如果把「ARC」的版本修改为上述的代码，
则执行结果：</p>

<pre><code>MRC:  end:358179460.237259, start:358179460.004701, diff:0.232558
</code></pre>

<p>是不是就变快了！(但还沒有办法跟原本的「MRC」版本一样快！)
所以其实写程序的時候要多想一下有沒有其它作法， 因为不同的写法虽然可能是相同結果， 但所需要的时间是不同的， 在使用 ARC 時， 如果能清楚的知道自己所创建的物件是被 retain 的状态， 那么在传递的过程中就可以视需求决定接收此物件是要 retain 或只是 assign， 这样可以让 XCode 在 Compile 的时候， 依照我们給它的指示去产生记忆体管理的代码， 避免不必要或多余的效能损失！</p>

<h4>5、 CF与Objective-C在ARC下的内存管理</h4>

<p>在cocoa application的应用中，我们有时会使用Core Foundation(CF),我们经常会在Objective-C和CF之间进行转化。系统使用arc的状态下，编译器不能自动管理CF的内存，这时候你必须使用CFRetain和CFRelease来进行CF的内存的管理。</p>

<p>具体的CF内存管理规则见： Memory Management Programming Guide for Core Foundation</p>

<p>在OC和FC之间进行转化的时候，主要是对象的归属问题。共有两种方式：</p>

<p>1、使用宏，可以标识归属者从OC到CF，还是从CF到OC。
```objc</p>

<pre><code>NS_INLINE CFTypeRef CFBridgingRetain(id X) { 
    return (__bridge_retain CFTypeRef)X; 
} 

NS_INLINE id CFBridgingRelease(CFTypeRef X) { 
    return (__bridge_transfer id)X; 
}
</code></pre>

<p><code>
2、使用转化符,如：`__bridge`，`__bridge_transfer`，`__bridge_retained`
</code>objc</p>

<pre><code>id my_id; 
CFStringRef my_cfref; 
… 
NSString   *a = (__bridge NSString*)my_cfref;     // Noop cast. 
CFStringRef b = (__bridge CFStringRef)my_id;      // Noop cast. 
… 
NSString   *c = (__bridge_transfer NSString*)my_cfref; // -1 on the CFRef 
CFStringRef d = (__bridge_retained CFStringRef)my_id;  // returned CFRef is +1
</code></pre>

<p>```
下面以详细的例子来介绍一下OC和CF在arc下内存管理的详细写法.下面以CFURLCreateStringByAddingPercentEscapes()函数为例说一下在ARC下的写法和非ARC下的写法。</p>

<p>非ARC模式下的写法：
```objc</p>

<pre><code>#pragma mark – View lifecycle 
- (void)viewDidLoad { 
    [super viewDidLoad]; 
    NSLog(@"=%@", [self escape:@"wangjun"]); 
} 
-(NSString *)escape:(NSString *)text { 
    return (NSString *)CFURLCreateStringByAddingPercentEscapes(NULL,(__bridge CFStringRef)text, NULL, CFSTR("!*’();:@&amp;=+$,/?%#[]"), CFStringConvertNSStringEncodingToEncoding(NSUTF8StringEncoding));; 
}
</code></pre>

<p>```
使用instruments检测，没有内存泄漏。</p>

<p>下面把上面工程改为arc模式。</p>

<p>可以看到xcode自动把上面函数转化为：
```objc</p>

<pre><code>#pragma mark – View lifecycle 
- (void)viewDidLoad { 
    [super viewDidLoad]; 
    NSLog(@"=%@", [self escape:@"wangjun"]); 
} 
-(NSString *)escape:(NSString *)text { 
    return (__bridge_transfer NSString *)CFURLCreateStringByAddingPercentEscapes(NULL,(__bridge CFStringRef)text,NULL,CFSTR("!*’();:@&amp;=+$,/?%#[]"), CFStringConvertNSStringEncodingToEncoding(NSUTF8StringEncoding));
}
</code></pre>

<p>```
在arc中，CF和OC之间的转化桥梁是 __bridge，有两种方式：</p>

<ul>
<li>__bridge_transfer  ARC接管管理内存</li>
<li>__bridge_retained  ARC释放内存管理</li>
</ul>


<p>上面的方法是从CF转化为OC NSString对象，使用的__bridge_transfer ，对象所有者发生转变，由CF到OC，最后由ARC接管内存管理。运行上面的代码，用instruments检测，是没有内存泄漏的。</p>

<p>上面代码等同于：
```objc</p>

<pre><code>- (NSString *)escape:(NSString *)text { 
    return CFBridgingRelease(CFURLCreateStringByAddingPercentEscapes(NULL, (__bridge CFStringRef)text,NULL,CFSTR("!*’();:@&amp;=+$,/?%#[]"), CFStringConvertNSStringEncodingToEncoding(NSUTF8StringEncoding)));
}
</code></pre>

<p><code>
如果将上述代码改为：
</code>objc</p>

<pre><code>-(NSString *)escape:(NSString *)text { 
    return (__bridge NSString *)CFURLCreateStringByAddingPercentEscapes(NULL,(__bridge CFStringRef)text, NULL, CFSTR("!*’();:@&amp;=+$,/?%#[]"), CFStringConvertNSStringEncodingToEncoding(NSUTF8StringEncoding));; 
}
</code></pre>

<p>```
编译也会成功，但是这时候用instruments检测，可以发现内存泄漏：</p>

<p>由于CF转化完OC，没有自己释放内存，同时也没有把内存管理交给ARC，所以出现内存泄漏。由于__bridge只是同一个对象的引用，内存的所有权没有发生变化。</p>

<p>下面在说一下oc到CF的转化，需要把OC的内存管理权释放掉。
```objc</p>

<pre><code>NSString *s1 = [[NSString alloc] initWithFormat:@"Hello, %@!", name]; 
CFStringRef s2 = (__bridge_retained CFStringRef)s1; 
// do something with s2 // . . . 
CFRelease(s2);
</code></pre>

<p>```
最后由CF进行内存释放。</p>

<p>上面代码等同于：
```objc</p>

<pre><code>CFStringRef s2 = CFBridgingRetain(s1); 
// . . . 
CFRelease(s2);
</code></pre>

<p>```
下面总结一下我们使用ARC情况下。oc和CF互相转化的原则：</p>

<ul>
<li>CF转化为OC时，并且对象的所有者发生改变，则使用<code>CFBridgingRelease()</code>或<code>__bridge_transfer</code> 。</li>
<li>OC转化为CF时，并且对象的所有者发生改变，则使用<code>CFBridgingRetain()</code>或<code>__bridge_retained</code></li>
</ul>


<p>当一个类型转化到另一种类型时，但是对象所有者没有发生改变，则使用__bridge.</p>

<h4>6、 使用ARC注意事项</h4>

<ul>
<li>属性命名不能用new开头</li>
<li>不再使用<code>retain</code>， <code>relase</code>， <code>autorelease</code>。</li>
<li><p>对<code>strong</code>,<code>weak</code>,<code>assign</code>,<code>copy</code>,<code>__weak</code>，<code>__strong</code>，<code>__autorelease</code>，<code>@autorelease{}</code>等的使用需要学习一下（特别注意一下<code>__weak</code>, <code>__strong</code>, <code>__autorelease</code>应该写在指针后边，变量名前面，否则不是正确写法，只是编译器会做一些处理）。</p></li>
<li><p>重写dealloc方法不调用[super dealloc]方法。</p></li>
<li><p>第三方库不支持arc，要將每个相关文件设置-fno-objc-arc。</p></li>
<li><p>arc对core foundation无效，需要自己控制内存，包括释放，并且需要cast的时候要用 <code>__bridge</code>，<code>__bridge_retain</code>，<code>__bridge_transfer</code>等修饰来控制对应内存。</p></li>
<li><p>arc和block的时候需要注意循环引用的问题。</p></li>
<li><p>还有和C混用的时候需要注意，先將对象赋nil再free掉相关内存。避免使用 C 的 memcpy 和 realloc 函数等等。</p></li>
<li>在dealloc中把成员变量置nil</li>
</ul>


<h4>7、 总结</h4>

<p>ARC相对于MRC时弱引用时运行效率确实会慢一些，但他在<code>[[[XXX alloc] init] autorelease]</code>时ARC不但可以简化其写法，还可以让它更快的处理，减少不必要的入池操作，而且他的优势也是十分明显的。ARC只是为了提高您的工作效率，而不是一个神奇而没有缺点的一项技术。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSObjective-C之id/NSObject/id&lt;NSObject>区别]]></title>
    <link href="http://www.beyondabel.com/blog/2014/02/16/ios-nsobject-id-difference/"/>
    <updated>2014-02-16T16:23:26+08:00</updated>
    <id>http://www.beyondabel.com/blog/2014/02/16/ios-nsobject-id-difference</id>
    <content type="html"><![CDATA[<h3>概述</h3>

<p>我们在iOS开发过程中，经常会碰到id、NSObject、id&lt; NSObject>，但我们也经常会混淆这三种申明（我之前也不是很留意这个），现在Abel带你一起去看看他们的真实面目。</p>

<!--more-->


<h3>目录</h3>

<ul>
<li>1、 id</li>
<li>2、 NSObject *</li>
<li>3、 id&lt;NSObject></li>
<li>4、 如何选择你要用的类型</li>
<li>5、 补充说明</li>
</ul>


<h4>1、 id</h4>

<p>第一种是最常用的，它简单地申明了指向对象的指针，没有给编译器任何类型信息，因此，编译器不会做类型检查。但也因为是这样，你可以发送任何信息给id类型的对象。这就是为什么+alloc返回id类型，但调用[[Foo alloc] init]不会产生编译错误。</p>

<p>因此，id类型是运行时的动态类型，编译器无法知道它的真实类型，即使你发送一个id类型没有的方法，也不会产生编译警告。</p>

<h4>2、 NSObject *</h4>

<p>我们知道，id类型是一个Objective-C对象，但并不是都指向继承自NSOjbect的对象，即使这个类型和NSObject对象有很多共同的方法，像retain和release。要让编译器知道这个类继承自NSObject，一种解决办法就是像第2种那样，使用NSObject静态类型，当你发送NSObject没有的方法，像length或者count时，编译器就会给出警告。这也意味着，你可以安全地使用像retain，release，description这些方法。</p>

<p>因此，申明一个通用的NSObject对象指针和你在其它语言里做的类似，像java，但其它语言有一定的限制，没有像Objective-C这样灵活。并不是所有的Foundation/Cocoa对象都继承息NSObject，比如NSProxy就不从NSObject继承，所以你无法使用NSObject＊指向这个对象，即使NSProxy对象有release和retain这样的通用方法。为了解决这个问题，这时候，你就需要一个指向拥有NSObject方法对象的指针，这就是第3种申明的使用情景。</p>

<h4>3、 id&lt;NSObject></h4>

<p>id&lt;NSObject>告诉编译器，你不关心对象是什么类型，但它必须遵守NSObject协议(protocol)，编译器就能保证所有赋值给id&lt;NSObject>类型的对象都遵守NSObject协议(protocol)。这样的指针可以指向任何NSObject对象，因为NSObject对象遵守NSObject协议(protocol)，而且，它也可以用来保存NSProxy对象，因为它也遵守NSObject协议(protocol)。这是非常强大，方便且灵活，你不用关心对象是什么类型，而只关心它实现了哪些方法。</p>

<h4>4、 如何选择你要用的类型</h4>

<p>如果你不需要任何的类型检查，使用id，它经常作为返回类型，也经常用于申明代理(delegate)类型。因为代理类型通常在运行时，才会检查是否实现了那些方法。</p>

<p>如果真的需要编译器检查，那你就考虑使用第2种或者第3种。很少看到NSObject＊能正常运行，但id&lt;NSObject>无法正常运行的。使用协议(protocol)的优点是，它能指向NSProxy对象，而更常用的情况是，你只想知道某个对象遵守了哪个协议，而不用关心它是什么类型。</p>

<h4>5、补充说明</h4>

<ul>
<li>id 还可以表示基础类型，但是不能表示float，double类型</li>
<li>NSObject *foo2; 如果使用这种形式，用到的时候需要强制类型转换，可能会很麻烦</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective C之Block教程]]></title>
    <link href="http://www.beyondabel.com/blog/2014/02/15/ios-block/"/>
    <updated>2014-02-15T21:06:42+08:00</updated>
    <id>http://www.beyondabel.com/blog/2014/02/15/ios-block</id>
    <content type="html"><![CDATA[<h3>引言</h3>

<p>Block是C级别的语法和运行时特性。Block比较类似C函数，但是Block比之C函数，其灵活性体现在栈内存、堆内存的引用，我们甚至可以将一个Block作为参数传给其他的函数或者Block。</p>

<!--more-->


<h3>目录</h3>

<ul>
<li>一、Block的基本介绍

<ul>
<li>1、什么是Block</li>
<li>2、Block和C语言函数指针和什么区别</li>
<li>3、如何调用Block</li>
</ul>
</li>
<li>二、Block内存管理与其他特性

<ul>
<li>1、Block放在哪里</li>
<li>2、Block引用的变量在哪里</li>
</ul>
</li>
<li>三、Block揭开神秘面纱</li>
</ul>


<h4>一、Block的基本介绍</h4>

<h5>1、什么是Block</h5>

<p>Block是一个C Level的语法以及运行时的一个特性，和标准C中的函数（函数指针）类似，但是其运行需要编译器和运行时支持，从iOS4.0开始就很好的支持Block了。广泛用于两个对象之前的回调函数。</p>

<p>下面我们来看一下Block的声明：</p>

<pre><code>int(^hbFunction) (BOOL a);
</code></pre>

<p>其中int为block的返回类型，hbFunction为block名称，a为参数。</p>

<h5>2、Block和C语言函数指针和什么区别</h5>

<p>首先我们来看看C函数指针：</p>

<pre><code>int (* hbFunction) (int a);  // 函数声明
int resut = hbFunction(10);  // 函数调用
</code></pre>

<p>再看看Block的用法：</p>

<pre><code>int (^ hbFunction) (int a);  // 函数声明
int resut = hbFunction(10);   // 函数调用
</code></pre>

<p>C语言函数指针typedef</p>

<pre><code>typedef int (*SumFunction)(int a,int b);
</code></pre>

<p>Block中的typedef</p>

<pre><code>typedef int (^SumBlock)(int a,int b);   
</code></pre>

<h5>3、如何调用Blocks</h5>

<p>主动调用一下：
```objc</p>

<pre><code>- (void)someMethod
{
    BoolBlock ablock = ^(BOOL bValue) {
        NSLog(@"Bool block!");
    };

    ablock();
}
</code></pre>

<p><code>
作为参数返回：
</code>objc</p>

<pre><code>typedef void (^BoolBlock)(BOOL);
- (BoolBlock)foo()
{
    BoolBlock ablock = ^(BOOL bValue) {
        NSLog(@"Bool block!");
    };
    return [[ablock copy] autorelease];//一定要copy，将其复制到堆上，更详细的原理，将在后续章节讲解
}
</code></pre>

<p><code>
类的一个成员：
</code>objc</p>

<pre><code>@interface OBJ1 : NSObject
@property (nonatomic, copy)BoolBlock block;//理由同上啊，同学们
@end
</code></pre>

<p>```</p>

<p>```objc</p>

<pre><code>OBJ1 *obj1 = ...
obj1.block = ^(BOOL bValue) {
    NSLog(@"Bool block!");
};
</code></pre>

<p><code>   
其他函数的参数：
</code>objc</p>

<pre><code>- (void)foo(BoolBlock block)
{
    if (block) {
        block();
    }
}
</code></pre>

<p><code>
甚至其他block的参数：
</code>objc</p>

<pre><code>BoolBlock bBlock = ^(BOOL bV){if(Bv){/*do some thing*/}};
HugeBlock hBlock = ^(BoolBlock bB) {bB();};

hBolck(bBlock); 
</code></pre>

<p>```</p>

<h4>二、Block内存管理与其他特性</h4>

<h5>1、Block放在哪里</h5>

<h6>1.1栈和堆</h6>

<p>以下情况中的block位于堆中：
```objc</p>

<pre><code>void foo()
{
    __block int i = 1024;
    int j = 1;
    void (^blk)(void);
    void (^blkInHeap)(void);
    blk = ^{ printf("%d, %d\n", i, j);};//blk在栈里
    blkInHeap = Block_copy(blk);//blkInHeap在堆里
}

- (void)fooBar
{
    _oi = 1;
    OBJ1* oj = self;
    void (^oblk)(void) = ^{ printf("%d\n", oj.oi);};
    void (^oblkInHeap)(void) = [oblk copy];//oblkInHeap在堆中
}
</code></pre>

<p>```</p>

<h6>1.2全局</h6>

<p>以下情况中的block位于全局区：
```objc</p>

<pre><code>static int(^maxIntBlock)(int, int) = ^(int a, int b){return a&gt;b?a:b;};
- (void)fooBar
{
    int(^maxIntBlockCopied)(int, int) =[maxIntBlock copy];
}

void foo()
{
    int(^maxIntBlockCopied)(int, int) = Block_copy(maxIntBlock);
}
</code></pre>

<p>```
需要注意的是，这里复制过后的block依旧位于全局区，实际上，复制操作是直接返回了原block对象。</p>

<h5>2、Block引用的变量在哪里</h5>

<h5>1.全局区</h5>

<p>全局区的变量存储位置与block无关：
```objc</p>

<pre><code>static int gVar = 0;
//__block static int gMVar = 1;

void foo()
{
    static int stackVar = 0;
//    __block static int stackMVar = 0;
}
</code></pre>

<p>```
注意，static变量是不允许添加__block标记的</p>

<h5>2.堆栈</h5>

<p>```objc</p>

<pre><code>void foo()
{
    __block int i = 1024; // 此时i在栈上
    int j = 1; // 此时j在栈上
    void (^blk)(void);
    blk = ^{
        printf("%d,  %d\n",i,j);
    };  //此时blk位于栈上，其使用的变量也在栈上

    blk();
    j++;
    int (^blkInHeap)(int, int) = Block_copy(blk);
    // 复制block后，block位于堆上，有__block标记的i会被复制一份至堆，而没有__block标记的j并不会动依旧位于栈上。

}
</code></pre>

<p>```</p>

<h4>三、Block揭开神秘面纱</h4>

<h5>1、Block到底是什么</h5>

<p>我们使用clang的rewrite-objc命令来获取转码后的代码。</p>

<p>我们来看看最简单的一个block：
```objc</p>

<pre><code>__block int i = 1024;
int j = 1;
void (^blk)(void);
blk = ^{
    printf("i :%d,j:%d,&amp;i:%p,&amp;j:%p",i,j,&amp;i,&amp;j);
};
</code></pre>

<p><code>
这个block仅仅打印栈变量i和j的值，其被clang转码为：
</code>objc</p>

<pre><code>struct __main_block_impl_0{
    struct __block_impl impl;
    struct __main_block_desc_0 * Desc;
    int j;
    __Block_byref_i_0 *i;
    __main_block_impl_0(void * fp, struct __main_block_desc_0 *desc,int _j,__Block_byref_i_0 *_i, int flags = 0) : j(_j),int(_i-&gt;__forwarding){
         impl.isa = &amp;_NSConcreteStackBlock;
         impl.Flags = flags;
         impl.FuncPtr = fp;
         Desc = desc;
    }
};

static void __main_block_func_0(struct __main_block_impl_0 *__cself){
   __Block_byref_i_0 *i = __cself-&gt;i;
   int j = __cself-&gt;j;
   printf("i :%d,j:%d,&amp;i:%p,&amp;j:%p",i-&gt;__forwarding-&gt;i,j,&amp;(i-&gt;__forwarding-&gt;i),&amp;j);
}

static void __main_block_copy_0(struct __main_block_impl_0 *dst, struct __main_block_impl_0 *src){
   _Block_object_assign((void *)&amp;dst-&gt;i, (void *)src-&gt;i,8);
}

static void __main_block_dispose_0(struct __main_block_impl_0 *src){
   _Block_object_dispose((void *)src-&gt;i,8);
}

static struct __main_block_desc_0{
   size_t reserved;
   size_t Block_size;
   void (*copy)(struct __main_block_impl_0*,struct __main_block_impl_0 *);
   void (*dispose)(struct __main_block_impl_0*);
}__main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0),__main_block_copy_0,__main_block_dispose_0};

int main()
{
   __attribute__((__blocks__(byref))) __Block_byref_i_0 = {(void *)0,(__Block_byref_i_0 *)&amp;i,0,sizeof(__Block_byref_i_0),1024};
  int j = 1;
  void (*blk)(void);
  blk = (void (*)())&amp; __main_block_impl_0((void *)__main_block_func_0,&amp;__main_block_desc_0_DATA,j,(__Block_byref_i_0 *)&amp;i,570425344);
}
</code></pre>

<p>```</p>

<p>首先是一个结构体<code>__main_block_impl_0</code>（从图二中的最后一行可以看到，block是一个指向<code>__main_block_impl_0</code>的指针，初始化后被类型强转为函数指针），其中包含的<code>__block_impl</code>是一个公共实现（学过c语言的同学都知道，<code>__main_block_impl_0</code>的这种写法表示其可以被类型强转为<code>__block_impl</code>类型）：</p>

<p>```objc</p>

<pre><code>struct __block_impl {
    void *isa;
    int Flags;
    int Reserved;
    void *FuncPtr;
};
</code></pre>

<p>```
 isa指针说明block可以成为一个objc 对象。</p>

<pre><code>__main_block_impl_0的意思是main函数中的第0个block的implementation，这就是这个block的主体了。
</code></pre>

<p>这个结构体的构造函数的参数：</p>

<ul>
<li><p>1、block实际执行代码所在的函数的指针，当block真正被执行时，实际上是调用了这个函数，其命名也是类似的方式。</p></li>
<li><p>2、block的描述结构体，注意这个结构体声明结束时就创建了一个唯一的desc，这个desc包含了block的大小，以及复制和析构block时需要额外调用的函数。</p></li>
<li><p>3、接下来是block所引用到的变量们</p></li>
<li><p>4、最后是一个标记值，内部实现需要用到的。（我用计算器看了一下，570425344这个值等于1&lt;&lt;29，即BLOCK_HAS_DESCRIPTOR这个枚举值）</p></li>
</ul>


<p>所以，我们可以看到：</p>

<ul>
<li>1、为什么上一篇我们说j已经不是原来的j了，因为j是作为参数传入了block的构造函数，进行了值复制。</li>
<li>2、带有__block标记的变量会被取地址来传入构造函数，为修改其值奠定了基础</li>
</ul>


<p>接下来是block执行函数<code>__main_block_func_0</code>:</p>

<p>其唯一的参数是<code>__main_block_impl_0</code>的指针，我们看到printf语句的数据来源都取自<code>__cself</code>这个指针，比较有意思的是i的取值方式（带有<code>__block</code>标记的变量i被转码为一个结构体），先取<code>__forward</code>指针，再取i，这为将i复制到堆中奠定了基础。</p>

<p>再下来是预定义好的两个复制/释放辅助函数，其作用后面会讲到。</p>

<p>最后是block的描述信息结构体 <code>__main_block_desc_0</code>，其包含block的内存占用长度，已经复制/释放辅助函数的指针，其声明结束时，就创建了一个名为<code>__main_block_desc_0_DATA</code>的结构体，我们看它构造时传入的值，这个DATA结构体的作用就一目了然了：</p>

<p>长度用sizeof计算，辅助函数的指针分别为上面预定义的两个辅助函数。</p>

<pre><code>注意，如果这个block没有使用到需要在block复制时进行copy/retian的变量，那么desc中不会有辅助函数
</code></pre>

<p>至此，一个block所有的部件我们都看齐全了，一个主体，一个真正的执行代码函数，一个描述信息(可能包含两个辅助函数)。</p>

<h5>2、构造一个block</h5>

<p>我们进入main函数：</p>

<p>图一中的第三行（block的声明），在图二中，转化为一个函数指针的声明，并且都没有被赋予初始值。
而图一中的最后一行（创建一个block），在图二中，成为了对<code>__main_block_impl_0</code>的构造函数的调用，传入的参数的意义上面我们已经讲过了。</p>

<p>所以构造一个block就是创建了<code>__main_block_impl_0</code> 这个c++类的实例。</p>

<h5>3、调用一个block</h5>

<p>调用一个block的写法很简单，与调用c语言函数的语法一样：</p>

<pre><code>blk();
</code></pre>

<p>其转码后的语句：</p>

<pre><code>((void (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);
</code></pre>

<p>将blk这个函数指针类型强转为<strong>block_impl类型，然后取其执行函数指针，然后将此指针类型强转为返回void*并接收一个</strong>block_impl<em>的函数指针，最后调用这个函数，传入强转为__block_impl</em>类型的blk，</p>

<p>即调用了前述的函数__main_block_func_0</p>

<h5>4、objective-c类成员函数中的block</h5>

<p>源码如下：
```objc</p>

<pre><code>- (void)of1
{
    OBJ1* oj = self;
    void (^oblk)(void) = ^{ printf("%d\n", oj.oi);};
    Block_copy(oblk);
}
</code></pre>

<p><code>
这里我故意将self赋值给oj这个变量，是为了验证前一章提出的一个结论：无法通过简单的间接引用self来防止retain循环，要避免循环，我们需要__block标记（多谢楼下网友的提醒）
转码如下：
</code>objc</p>

<pre><code>struct __OBJ1__of1_block_impl_0 {
    struct __block_impl impl;
    struct __OBJ1__of1_block_desc_0* Desc;
    OBJ1 *oj;
    __OBJ1__of1_block_impl_0(void *fp, struct __OBJ1__of1_block_desc_0 *desc, OBJ1 *_oj, int flags=0) : oj(_oj) {
    impl.isa = &amp;_NSConcreteStackBlock;
    impl.Flags = flags;
    impl.FuncPtr = fp;
    Desc = desc;
    }
};
static void __OBJ1__of1_block_func_0(struct __OBJ1__of1_block_impl_0 *__cself) {
    OBJ1 *oj = __cself-&gt;oj; // bound by copy
    printf("%d\n", ((int (*)(id, SEL))(void *)objc_msgSend)((id)oj,         sel_registerName("oi")));
}
</code></pre>

<p>```
objc方法中的block与c中的block并无太多差别，只是一些标记值可能不同，为了标记其是objc方法中的blcok。</p>

<p>注意其构造函数的参数:OBJ1 *_oj</p>

<p>这个<em>oj在block复制到heap时，会被retain，而</em>oj与self根本就是相等的，所以，最终retain的就是self，所以如果当前实例持有了这个block，retain循环就形成了。</p>

<p>而一旦为其增加了__block标记：
```objc</p>

<pre><code>- (void)of1
{
    __block OBJ1 *bSelf = self;
    ^{ printf("%d", bSelf.oi); };
}
</code></pre>

<p>```
其转码则变为：</p>

<p>//增加了如下行
```objc</p>

<pre><code>struct __Block_byref_bSelf_0 {
    void *__isa;
    __Block_byref_bSelf_0 *__forwarding;
    int __flags;
    int __size;
    void (*__Block_byref_id_object_copy)(void*, void*);
    void (*__Block_byref_id_object_dispose)(void*);
    OBJ1 *bSelf;
};

static void __Block_byref_id_object_copy_131(void *dst, void *src) {
    _Block_object_assign((char*)dst + 40, *(void * *) ((char*)src + 40), 131);
}

static void __Block_byref_id_object_dispose_131(void *src) {
    _Block_object_dispose(*(void * *) ((char*)src + 40), 131);
}
</code></pre>

<p>```</p>

<pre><code>//声明处变为
__block __Block_byref_bSelf_0 bSelf = {(void*)0,(__Block_byref_bSelf_0 *)&amp;bSelf, 33554432, sizeof(__Block_byref_bSelf_0),   __Block_byref_id_object_copy_131, __Block_byref_id_object_dispose_131, self};
</code></pre>

<p>clang为我们的bSelf结构体创建了自己的copy/dispose辅助函数，33554432（即1&lt;&lt;25 BLOCK_HAS_COPY_DISPOSE）这个值告诉系统，我们的bSelf结构体具有copy/dispose辅助函数。</p>

<p>而131这个参数（二进制1000 0011，即BLOCK_FIELD_IS_OBJECT (3) |BLOCK_BYREF_CALLER（128））
中的BLOCK_BYREF_CALLER在内部实现中告诉系统不要进行retain或者copy，
也就是说，在 __block bSelf 被复制至heap上时，系统会发现有辅助函数，而辅助函数调用后，并不retain或者copy 其结构体内的bSelf。
这样就避免了循环retain。</p>

<h4>2、内存管理的真面目</h4>

<p>objc层面如何区分不同内存区的block</p>

<p>Block_private.h中有这样一组值：</p>

<pre><code>/* the raw data space for runtime classes for blocks */
/* class+meta used for stack, malloc, and collectable based blocks */
BLOCK_EXPORT void * _NSConcreteStackBlock[32];
BLOCK_EXPORT void * _NSConcreteMallocBlock[32];
BLOCK_EXPORT void * _NSConcreteAutoBlock[32];
BLOCK_EXPORT void * _NSConcreteFinalizingBlock[32];
BLOCK_EXPORT void * _NSConcreteGlobalBlock[32];
BLOCK_EXPORT void * _NSConcreteWeakBlockVariable[32];
</code></pre>

<p>其用于对block的isa指针赋值
1.栈
```objc</p>

<pre><code>struct __OBJ1__of2_block_impl_0 {
    struct __block_impl impl;
    struct __OBJ1__of2_block_desc_0* Desc;
    OBJ1 *self;
    __OBJ1__of2_block_impl_0(void *fp, struct __OBJ1__of2_block_desc_0 *desc, OBJ1 *_self, int flags=0) : self(_self) {
        impl.isa = &amp;_NSConcreteStackBlock;
        impl.Flags = flags;
        impl.FuncPtr = fp;
        Desc = desc;
    }
};
</code></pre>

<p>```
在栈上创建的block，其isa指针是_NSConcreteStackBlock。</p>

<h5>2.全局区</h5>

<p>在全局区创建的block，其比较类似，其构造函数会将isa指针赋值为_NSConcreteGlobalBlock。</p>

<h5>3.堆</h5>

<p>我们无法直接创建堆上的block，堆上的block需要从stack block拷贝得来，在runtime.c中的_Block_copy_internal函数中，有这样几行：
```objc</p>

<pre><code>// Its a stack block.  Make a copy.
if (!isGC) {
    struct Block_layout *result = malloc(aBlock-&gt;descriptor-&gt;size);
    ...
    result-&gt;isa = _NSConcreteMallocBlock;
    ...
    return result;
}
</code></pre>

<p>```  <br/>
可以看到，栈block复制得来的新block，其isa指针会被赋值为_NSConcreteMallocBlock</p>

<h5>4.其余的isa类型</h5>

<pre><code>BLOCK_EXPORT void * _NSConcreteAutoBlock[32];
BLOCK_EXPORT void * _NSConcreteFinalizingBlock[32];
BLOCK_EXPORT void * _NSConcreteWeakBlockVariable[32];
</code></pre>

<p>其他三种类型是用于gc和arc，我们暂不讨论</p>

<p>复制block</p>

<p> 对block调用Block_copy方法，或者向其发送objc copy消息，最终都会调用runtime.c中的<code>_Block_copy_internal</code>函数，其内部实现会检查block的flag，从而进行不同的操作：
```objc</p>

<pre><code>static void *_Block_copy_internal(const void *arg, const int flags) {
    ...
    aBlock = (struct Block_layout *)arg;
    ...
}
</code></pre>

<p><code>
1.栈block的复制
</code>objc</p>

<pre><code> // reset refcount
 result-&gt;flags &amp;= ~(BLOCK_REFCOUNT_MASK);    // XXX not needed
 result-&gt;flags |= BLOCK_NEEDS_FREE | 1;
 result-&gt;isa = _NSConcreteMallocBlock;
 if (result-&gt;flags &amp; BLOCK_HAS_COPY_DISPOSE) {
     //printf("calling block copy helper %p(%p, %p)...\n", aBlock-&gt;descriptor-&gt;copy, result, aBlock);
     (*aBlock-&gt;descriptor-&gt;copy)(result, aBlock); // do fixup
 }
</code></pre>

<p>```
除了修改isa指针的值之外，拷贝过程中，还会将BLOCK_NEEDS_FREE置入，大家记住这个值，后面会用到。
最后，如果block有辅助copy/dispose函数，那么辅助的copy函数会被调用。</p>

<p>2.全局block的复制
```objc</p>

<pre><code>else if (aBlock-&gt;flags &amp; BLOCK_IS_GLOBAL) {
    return aBlock;
}
</code></pre>

<p>```  <br/>
全局block进行copy是直接返回了原block，没有任何的其他操作。</p>

<p>3.堆block的复制
```objc</p>

<pre><code>if (aBlock-&gt;flags &amp; BLOCK_NEEDS_FREE) {
    // latches on high
    latching_incr_int(&amp;aBlock-&gt;flags);
    return aBlock;
}
</code></pre>

<p>```  <br/>
栈block复制时，置入的BLOCK_NEEDS_FREE标记此时起作用，_Block_copy_internal函数识别当前block是一个堆block，则仅仅增加引用计数，然后返回原block。</p>

<p>辅助copy/dispose函数</p>

<p>1.普通变量的复制
辅助copy函数用于拷贝block所引用的可修改变量，我们这里以 __block int i = 1024为例：
先看看Block_private.h中的定义：
```objc</p>

<pre><code>struct Block_byref {
    void *isa;
    struct Block_byref *forwarding;
    int flags; /* refcount; */
    int size;
    void (*byref_keep)(struct Block_byref *dst, struct Block_byref *src);
    void (*byref_destroy)(struct Block_byref *);
    /* long shared[0]; */
};
</code></pre>

<p><code>
而我们的__block int i = 1024的转码：
</code>objc</p>

<pre><code>struct __Block_byref_i_0 {
    void *__isa;
    __Block_byref_i_0 *__forwarding;
    int __flags;
    int __size;
    int i;
};//所以我们知道，当此结构体被类型强转为Block_byref时，前四个成员是一致的，访问flags就相当于访问__flags，而内部实现就是这样使用的
...
__attribute__((__blocks__(byref))) __Block_byref_i_0 i = {(void*)0, (__Block_byref_i_0 *)&amp;i, 0, sizeof(__Block_byref_i_0), 1024};//i初始化时__flags为0
static void __main_block_copy_0(struct __main_block_impl_0*dst, struct  __main_block_impl_0*src) {_Block_object_assign((void*)&amp;dst-&gt;i, (void*)src-&gt;i, 8/*BLOCK_FIELD_IS_BYREF*/);}
</code></pre>

<p><code>
此时，复制时调用的辅助函数：
</code>objc</p>

<pre><code>void _Block_object_assign(void *destAddr, const void *object, const int flags) {//此处flags为8，即BLOCK_FIELD_IS_BYREF
...
    if ((flags &amp; BLOCK_FIELD_IS_BYREF) == BLOCK_FIELD_IS_BYREF)  {
        // copying a __block reference from the stack Block to the heap
        // flags will indicate if it holds a __weak reference and needs a special isa
        _Block_byref_assign_copy(destAddr, object, flags);
    }
...
}

static void _Block_byref_assign_copy(void *dest, const void *arg, const int flags) {//此处flags为8，即BLOCK_FIELD_IS_BYREF
    struct Block_byref **destp = (struct Block_byref **)dest;
    struct Block_byref *src = (struct Block_byref *)arg;
    ...
    else if ((src-&gt;forwarding-&gt;flags &amp; BLOCK_REFCOUNT_MASK) == 0) {//当初次拷贝i时，flags为0，进入此分支会进行复制操作并改变flags值，置入BLOCK_NEEDS_FREE和初始的引用计数
   ...
    }
    // already copied to heap
    else if ((src-&gt;forwarding-&gt;flags &amp; BLOCK_NEEDS_FREE) == BLOCK_NEEDS_FREE) {//当再次拷贝i时，则仅仅增加其引用计数
        latching_incr_int(&amp;src-&gt;forwarding-&gt;flags);
    }
    // assign byref data block pointer into new Block
    _Block_assign(src-&gt;forwarding, (void **)destp);//这句仅仅是直接赋值，其函数实现只有一行赋值语句，查阅runtime.c可知
}
</code></pre>

<p>```
所以，我们知道，当我们多次copy一个block时，其引用的__block变量只会被拷贝一次。</p>

<p>2.objc变量的复制</p>

<p>当objc变量没有__block修饰时：
```objc</p>

<pre><code>static void __OBJ1__of2_block_copy_0(struct __OBJ1__of2_block_impl_0*dst, struct __OBJ1__of2_block_impl_0*src) {_Block_object_assign((void*)&amp;dst-&gt;self, (void*)src-&gt;self, 3/*BLOCK_FIELD_IS_OBJECT*/);}

void _Block_object_assign(void *destAddr, const void *object, const int flags) {
    ...
    else if ((flags &amp; BLOCK_FIELD_IS_OBJECT) == BLOCK_FIELD_IS_OBJECT) {
        //printf("retaining object at %p\n", object);
        _Block_retain_object(object);//当我们没有开启arc时，这个函数会retian此object
        //printf("done retaining object at %p\n", object);
        _Block_assign((void *)object, destAddr);
    }
    ....
}
</code></pre>

<p><code>
当objc变量有__block修饰时：
</code>objc</p>

<pre><code>struct __Block_byref_bSelf_0 {
    void *__isa;
    __Block_byref_bSelf_0 *__forwarding;
    int __flags;
    int __size;
    void (*__Block_byref_id_object_copy)(void*, void*);
    void (*__Block_byref_id_object_dispose)(void*);
    OBJ1 *bSelf;
};

static void __Block_byref_id_object_copy_131(void *dst, void *src) {
    _Block_object_assign((char*)dst + 40, *(void * *) ((char*)src + 40), 131);//131即为BLOCK_FIELD_IS_OBJECT|BLOCK_BYREF_CALLER
}
static void __Block_byref_id_object_dispose_131(void *src) {
    _Block_object_dispose(*(void * *) ((char*)src + 40), 131);
}

... //33554432即为BLOCK_HAS_COPY_DISPOSE

__block __Block_byref_bSelf_0 bSelf = {(void*)0,(__Block_byref_bSelf_0 *)&amp;bSelf, 33554432, sizeof(__Block_byref_bSelf_0), __Block_byref_id_object_copy_131, __Block_byref_id_object_dispose_131, self};
</code></pre>

<p>```</p>

<p>BLOCK_HAS_COPY_DISPOSE告诉内部实现，这个变量结构体具有自己的copy/dispose辅助函数，而此时我们的内部实现不会进行默认的复制操作：
```objc</p>

<pre><code>void _Block_object_assign(void *destAddr, const void *object, const int flags) {
    //printf("_Block_object_assign(*%p, %p, %x)\n", destAddr, object, flags);
    if ((flags &amp; BLOCK_BYREF_CALLER) == BLOCK_BYREF_CALLER) {
        if ((flags &amp; BLOCK_FIELD_IS_WEAK) == BLOCK_FIELD_IS_WEAK) {
            _Block_assign_weak(object, destAddr);
    }
    else {
        // do *not* retain or *copy* __block variables whatever they are
        _Block_assign((void *)object, destAddr);
    }
}
</code></pre>

<p>```  <br/>
当我们没有开启arc，且flags中具有BLOCK_BYREF_CALLER时，会进入_Block_assign函数，而此函数仅仅是赋值
所以，如果要避免objc实例中的block引起的循环引用，我们需要让block间接使用self：</p>

<pre><code>__block bSelf = self;
</code></pre>

<p>其他</p>

<p>对于dipose辅助函数，其行为与copy是类似的，我们不再重复同样的东西，如果大家要了解，自行查阅runtime.c和Block_private.h即可。</p>

<p>我们已经理解了非arc非gc情况下的block的内存管理内部实现，对arc和gc的情况，其行为也是类似的，只是一些函数的指针指向的真正函数会改变，比如_Block_use_GC函数，会将一些函数指向其他的实现，使其适用于gc开启的情况。</p>
]]></content>
  </entry>
  
</feed>
