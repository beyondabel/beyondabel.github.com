<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 开源项目 | Abel's Den]]></title>
  <link href="http://www.beyondabel.com/blog/categories/kai-yuan-xiang-mu/atom.xml" rel="self"/>
  <link href="http://www.beyondabel.com/"/>
  <updated>2016-03-22T23:36:43+08:00</updated>
  <id>http://www.beyondabel.com/</id>
  <author>
    <name><![CDATA[Abel]]></name>
    <email><![CDATA[abel_tu@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ABELWebImageKit使用介绍]]></title>
    <link href="http://www.beyondabel.com/blog/2014/02/10/abelwebimagekit/"/>
    <updated>2014-02-10T20:30:17+08:00</updated>
    <id>http://www.beyondabel.com/blog/2014/02/10/abelwebimagekit</id>
    <content type="html"><![CDATA[<h3>引言</h3>

<p>ABELWebImageKit托管在github上：<a href="https://github.com/beyondabel/ABELWebImage">https://github.com/beyondabel/ABELWebImage</a></p>

<!--more-->


<h3>目录</h3>

<pre><code>1、ABELWebImageKit介绍
2、ABELWebImageKit库结构的简单分析
3、ABELWebImageKit库的图片管理
4、ABELWebImageKit库使用的简单举例
</code></pre>

<h3>1、ABELWebImageKit介绍</h3>

<p>这个库提供一个ABELImageView类以支持加载来自网络的远程图片。具有缓存管理、异步下载、同一个URL下载次数控制和优化等特征。将ABELWebImageKit类库添加入工程时，一定注意需要添加ImageIO.framework。UIImage+Tools依赖这个framework。</p>

<h3>2、ABELWebImageKit库结构的简单分析</h3>

<p>ABELImageView：ABELImageView继承于UIImageView的，它主要用于加载来自网络的远程图片。其中avater用于区别是否为头像图片（默认非头像）。</p>

<p>ABELWebImageCacheManager：ABELWebImageCacheManager是一个单例，对图片进行管理的中转站，读取图片（向下层读取Cache或者读取网络），实现ABELWebImageCache和ABELWebImageRequest的回调。</p>

<p>ABELWebImageCache：根据URL的MD5摘要对图片进行存储和读取（实现存在内存中或者存在硬盘上两种实现）     实现图片和内存清理工作。
ABELWebImageRequest：根据URL向网络读取数据</p>

<h3>3、ABELWebImageKit库的图片管理</h3>

<p>ABELWebImageCache分两个部分，一个是内存层面的，一个是硬盘层面的。</p>

<p>内存层面的相当是个缓存器，以Key-Value的形式存储图片。当内存不够的时候会清除所有缓存图片。用搜索文件系统的方式做管理，文件替换方式是以时间为单位，剔除时间大于一周的图片文件。当ABELWebImageCacheManager向ABELWebImageCache要资源时，先搜索内存层面的数据，如果有直接返回，没有的话去访问磁盘，将图片从磁盘读取出来，然后做Decoder，将图片对象放到内存层面做备份，再返回调用层。</p>

<h3>4、ABELWebImageKit库使用的简单举例</h3>

<pre><code>self.avatarImageView = [[ABELImageView alloc] init];
// 设置avatar为YES为显示圆形头像图片，否则为普通的图片
self.avatarImageView.avatar = YES;
self.avatarImageView.frame = CGRectMake(15, 10, 40, 40);
[self.avatarImageView setImageWithURL:[NSURL URLWithString:URLString]]
[self.contentView addSubview:self.avatarImageView];
</code></pre>
]]></content>
  </entry>
  
</feed>
